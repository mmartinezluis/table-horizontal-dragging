:ruby
  container_id = "hor-scroll-container"

%div{:id => "#{container_id}" }

:javascript
  $(document).ready(function () {
    const limit = 90/100;  // a percentage
    const table = $('table');
    const container = $('#hor-scroll-container');
    const styles = containerStyles;
    container.css(styles);

    // exit the function if there is not a table
    if(!table.length) return;

    if(_is_within_bounds()) {
      _attach_feature();
    }

    window.onresize = showScrolling;

    var lastScrollLeft = 0;
    $(document).scroll(function() {
      const documentScrollLeft = $(document).scrollLeft();
      console.log(container.attr('style'))
      if(lastScrollLeft !== documentScrollLeft) {
        lastScrollLeft = documentScrollLeft;

        const draggable = container.children();
        const draggableThickness = draggable.outerWidth() - draggable.innerWidth();
        const pageMaxScrollWidth = $(document).width() - window.innerWidth;
        const featureMaxScrollWidth = container.width() - (draggable.width() + draggableThickness);

        draggable.css('left', (lastScrollLeft/pageMaxScrollWidth) * featureMaxScrollWidth)
      }
    })
    

    function showScrolling() {
        if(_is_within_bounds()) {
          // exit the function if there is already a dragging box
          if(container.html() !== '') {
            // TODO: Use this function to resize the dragging box width proportional 
            // to the current page width
            //adjust_feature();
            return;
          }
          _attach_feature();
          console.log(container.html())
        } else {
            _destroy_feature();
        }
    }

    function _attach_feature() {
        _destroy_feature();
        const feature = yieldFeature();
        container.append(feature);
    }

    function _destroy_feature() {
        container.html('');
        container.attr('style', '');
    }

    function _is_within_bounds() {
      const tableWidth = table.width();
      const winWidth = window.innerWidth;
      const widthRatio = winWidth / tableWidth;
      if(widthRatio <= limit) {
        return true;
      }
    }
  })

  function yieldFeature() {
    const container = $('#hor-scroll-container');
    const draggingBox = $("<div></div>");
    container.css({
      ...containerStyles,
      ...containerAjustedStyles
      });
    draggingBox.css(draggingBoxStyles);
    draggingBox.draggable({
      axis: 'x',
      containment: '#' + `#{container_id}`,
      drag: function(e, ui) {
        const draggable = ui.helper;
        const draggableThickness = draggable.outerWidth() - draggable.innerWidth();
        const pageMaxScrollWidth = $(document).width() - window.innerWidth;
        const featureMaxScrollWidth = container.width() - (draggable.width() + draggableThickness);
        
        const originalPosition = ui.originalPosition.left;
        const currentPosition = ui.position.left;
        console.log(currentPosition)
        $(document).scrollLeft((currentPosition/featureMaxScrollWidth) * pageMaxScrollWidth)
      }
    });
    return draggingBox;
  }

  const containerStyles = {
    "position": "fixed",
    "bottom": "3%",
    "right": "3%",
    "padding": "5px 0",
  }

  const containerAjustedStyles = {
    "border": "solid black 3px",
    "min-width": "110px",
  }

  const draggingBoxStyles = {
    "border": "solid blue 2px",
    "max-width": "75px",
    "min-height": "40px",
    "cursor": "move",
  };


  // Current horizontal scroll position = $(document).scrollLeft()
  // max scroll horizontal = width of table - current width of page
  // max scroll horizontal = width of page - current width of page
  //                       = $(document).width() - window.innerWidth

